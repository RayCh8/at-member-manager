// Code generated by protoc-gen-svc. DO NOT EDIT.
package pb

import (
	"context"
	"errors"
	"time"

	"github.com/graphql-go/graphql"
	ms "github.com/mitchellh/mapstructure"
	"google.golang.org/grpc"
)

const AtMemberManagerGrpcContextKey = "grpc-client-AtMemberManager"

type deferFunc func()

func ContextWithGrpcClient(ctx context.Context, addr string) (context.Context, deferFunc, error) {
	conn, err := grpc.Dial(addr, grpc.WithInsecure(), grpc.WithBlock())
	if err != nil {
		return nil, nil, err
	}
	client := NewAtMemberManagerClient(conn)
	handleDeferFunc := func() {
		conn.Close()
	}
	return context.WithValue(ctx, AtMemberManagerGrpcContextKey, &client), handleDeferFunc, nil
}

func RefiningAtMemberManagerGrpcClientFromContext(ctx context.Context) (*AtMemberManagerClient, error) {
	client, ok := ctx.Value(AtMemberManagerGrpcContextKey).(*AtMemberManagerClient)
	if !ok {
		return nil, errors.New("RefiningAtMemberManagerGrpcClientFromContext failed")
	}
	return client, nil
}

var MemberObject = graphql.NewObject(graphql.ObjectConfig{
	Name: "MemberObject",
	Fields: graphql.Fields{
		"id":         &graphql.Field{Type: graphql.Int},
		"name":       &graphql.Field{Type: graphql.String},
		"birthday":   &graphql.Field{Type: graphql.String},
		"created_at": &graphql.Field{Type: graphql.String},
		"updated_at": &graphql.Field{Type: graphql.String},
	},
	Description: "",
})

var HealthReqObject = graphql.NewObject(graphql.ObjectConfig{
	Name:        "HealthReqObject",
	Fields:      graphql.Fields{},
	Description: "",
})

var CreateMemberResObject = graphql.NewObject(graphql.ObjectConfig{
	Name: "CreateMemberResObject",
	Fields: graphql.Fields{
		"member": &graphql.Field{Type: MemberObject},
	},
	Description: "",
})

var ListMembersReqObject = graphql.NewObject(graphql.ObjectConfig{
	Name:        "ListMembersReqObject",
	Fields:      graphql.Fields{},
	Description: "",
})

var ListMembersResObject = graphql.NewObject(graphql.ObjectConfig{
	Name: "ListMembersResObject",
	Fields: graphql.Fields{
		"members": &graphql.Field{Type: graphql.NewList(MemberObject)},
	},
	Description: "",
})

var DeleteMemberReqObject = graphql.NewObject(graphql.ObjectConfig{
	Name: "DeleteMemberReqObject",
	Fields: graphql.Fields{
		"id": &graphql.Field{Type: graphql.String},
	},
	Description: "",
})

var HealthResObject = graphql.NewObject(graphql.ObjectConfig{
	Name: "HealthResObject",
	Fields: graphql.Fields{
		"ok": &graphql.Field{Type: graphql.Boolean},
	},
	Description: "",
})

var CreateMemberReqObject = graphql.NewObject(graphql.ObjectConfig{
	Name: "CreateMemberReqObject",
	Fields: graphql.Fields{
		"name":     &graphql.Field{Type: graphql.String},
		"birthday": &graphql.Field{Type: graphql.String},
	},
	Description: "",
})

var UpdateMemberReqObject = graphql.NewObject(graphql.ObjectConfig{
	Name: "UpdateMemberReqObject",
	Fields: graphql.Fields{
		"id":       &graphql.Field{Type: graphql.String},
		"name":     &graphql.Field{Type: graphql.String},
		"birthday": &graphql.Field{Type: graphql.String},
	},
	Description: "",
})

var UpdateMemberResObject = graphql.NewObject(graphql.ObjectConfig{
	Name: "UpdateMemberResObject",
	Fields: graphql.Fields{
		"member": &graphql.Field{Type: MemberObject},
	},
	Description: "",
})

var DeleteMemberResObject = graphql.NewObject(graphql.ObjectConfig{
	Name:        "DeleteMemberResObject",
	Fields:      graphql.Fields{},
	Description: "",
})

var HealthArguments = graphql.FieldConfigArgument{}

var HealthQueryType = graphql.NewObject(graphql.ObjectConfig{
	Name: "HealthQueryType",
	Fields: graphql.Fields{
		"ok": &graphql.Field{Type: graphql.Boolean},
	},
	Description: "",
})

func AtMemberManagerHealthResolver(p graphql.ResolveParams) (interface{}, error) {
	type result struct {
		data interface{}
		err  error
	}
	ch := make(chan result, 1)
	go func() {
		defer close(ch)

		client, err := RefiningAtMemberManagerGrpcClientFromContext(p.Context)
		if err != nil {
			ch <- result{data: nil, err: err}
			return
		}

		ctx, _ := context.WithTimeout(context.Background(), time.Second*30)
		req := HealthReq{}
		if len(p.Args) != 0 {
			err = ms.Decode(p.Args, &req)
			if err != nil {
				ch <- result{data: nil, err: err}
				return
			}
		}

		res, err := (*client).Health(ctx, &req)
		if err != nil {
			ch <- result{data: nil, err: err}
			return
		}
		ch <- result{data: res, err: nil}
	}()
	return func() (interface{}, error) {
		r := <-ch
		return r.data, r.err
	}, nil
}

var CreateMemberArguments = graphql.FieldConfigArgument{
	"name":     &graphql.ArgumentConfig{Type: graphql.String},
	"birthday": &graphql.ArgumentConfig{Type: graphql.String},
}

var CreateMemberQueryType = graphql.NewObject(graphql.ObjectConfig{
	Name: "CreateMemberQueryType",
	Fields: graphql.Fields{
		"member": &graphql.Field{Type: MemberObject},
	},
	Description: "",
})

func AtMemberManagerCreateMemberResolver(p graphql.ResolveParams) (interface{}, error) {
	type result struct {
		data interface{}
		err  error
	}
	ch := make(chan result, 1)
	go func() {
		defer close(ch)

		client, err := RefiningAtMemberManagerGrpcClientFromContext(p.Context)
		if err != nil {
			ch <- result{data: nil, err: err}
			return
		}

		ctx, _ := context.WithTimeout(context.Background(), time.Second*30)
		req := CreateMemberReq{}
		if len(p.Args) != 0 {
			err = ms.Decode(p.Args, &req)
			if err != nil {
				ch <- result{data: nil, err: err}
				return
			}
		}

		res, err := (*client).CreateMember(ctx, &req)
		if err != nil {
			ch <- result{data: nil, err: err}
			return
		}
		ch <- result{data: res, err: nil}
	}()
	return func() (interface{}, error) {
		r := <-ch
		return r.data, r.err
	}, nil
}

var UpdateMemberArguments = graphql.FieldConfigArgument{
	"id":       &graphql.ArgumentConfig{Type: graphql.String},
	"name":     &graphql.ArgumentConfig{Type: graphql.String},
	"birthday": &graphql.ArgumentConfig{Type: graphql.String},
}

var UpdateMemberQueryType = graphql.NewObject(graphql.ObjectConfig{
	Name: "UpdateMemberQueryType",
	Fields: graphql.Fields{
		"member": &graphql.Field{Type: MemberObject},
	},
	Description: "",
})

func AtMemberManagerUpdateMemberResolver(p graphql.ResolveParams) (interface{}, error) {
	type result struct {
		data interface{}
		err  error
	}
	ch := make(chan result, 1)
	go func() {
		defer close(ch)

		client, err := RefiningAtMemberManagerGrpcClientFromContext(p.Context)
		if err != nil {
			ch <- result{data: nil, err: err}
			return
		}

		ctx, _ := context.WithTimeout(context.Background(), time.Second*30)
		req := UpdateMemberReq{}
		if len(p.Args) != 0 {
			err = ms.Decode(p.Args, &req)
			if err != nil {
				ch <- result{data: nil, err: err}
				return
			}
		}

		res, err := (*client).UpdateMember(ctx, &req)
		if err != nil {
			ch <- result{data: nil, err: err}
			return
		}
		ch <- result{data: res, err: nil}
	}()
	return func() (interface{}, error) {
		r := <-ch
		return r.data, r.err
	}, nil
}

var ListMembersArguments = graphql.FieldConfigArgument{}

var ListMembersQueryType = graphql.NewObject(graphql.ObjectConfig{
	Name: "ListMembersQueryType",
	Fields: graphql.Fields{
		"members": &graphql.Field{Type: graphql.NewList(MemberObject)},
	},
	Description: "",
})

func AtMemberManagerListMembersResolver(p graphql.ResolveParams) (interface{}, error) {
	type result struct {
		data interface{}
		err  error
	}
	ch := make(chan result, 1)
	go func() {
		defer close(ch)

		client, err := RefiningAtMemberManagerGrpcClientFromContext(p.Context)
		if err != nil {
			ch <- result{data: nil, err: err}
			return
		}

		ctx, _ := context.WithTimeout(context.Background(), time.Second*30)
		req := ListMembersReq{}
		if len(p.Args) != 0 {
			err = ms.Decode(p.Args, &req)
			if err != nil {
				ch <- result{data: nil, err: err}
				return
			}
		}

		res, err := (*client).ListMembers(ctx, &req)
		if err != nil {
			ch <- result{data: nil, err: err}
			return
		}
		ch <- result{data: res, err: nil}
	}()
	return func() (interface{}, error) {
		r := <-ch
		return r.data, r.err
	}, nil
}

var DeleteMemberArguments = graphql.FieldConfigArgument{
	"id": &graphql.ArgumentConfig{Type: graphql.String},
}

var DeleteMemberQueryType = graphql.NewObject(graphql.ObjectConfig{
	Name:        "DeleteMemberQueryType",
	Fields:      graphql.Fields{},
	Description: "",
})

func AtMemberManagerDeleteMemberResolver(p graphql.ResolveParams) (interface{}, error) {
	type result struct {
		data interface{}
		err  error
	}
	ch := make(chan result, 1)
	go func() {
		defer close(ch)

		client, err := RefiningAtMemberManagerGrpcClientFromContext(p.Context)
		if err != nil {
			ch <- result{data: nil, err: err}
			return
		}

		ctx, _ := context.WithTimeout(context.Background(), time.Second*30)
		req := DeleteMemberReq{}
		if len(p.Args) != 0 {
			err = ms.Decode(p.Args, &req)
			if err != nil {
				ch <- result{data: nil, err: err}
				return
			}
		}

		res, err := (*client).DeleteMember(ctx, &req)
		if err != nil {
			ch <- result{data: nil, err: err}
			return
		}
		ch <- result{data: res, err: nil}
	}()
	return func() (interface{}, error) {
		r := <-ch
		return r.data, r.err
	}, nil
}

var internalAtMemberManagerRootQuery = graphql.NewObject(graphql.ObjectConfig{
	Name: "AtMemberManagerQuery",
	Fields: graphql.Fields{
		"Health": &graphql.Field{
			Name:    "Health",
			Type:    HealthQueryType,
			Args:    HealthArguments,
			Resolve: AtMemberManagerHealthResolver,
		},
		"ListMembers": &graphql.Field{
			Name:    "ListMembers",
			Type:    ListMembersQueryType,
			Args:    ListMembersArguments,
			Resolve: AtMemberManagerListMembersResolver,
		},
	},
})

var AtMemberManagerRootQueryField = graphql.Field{
	Name: "AtMemberManager",
	Type: internalAtMemberManagerRootQuery,
	Resolve: func(p graphql.ResolveParams) (interface{}, error) {
		return func() (interface{}, error) {
			return p.Info, nil
		}, nil
	},
}

var internalAtMemberManagerRootMutation = graphql.NewObject(graphql.ObjectConfig{
	Name: "AtMemberManagerMutation",
	Fields: graphql.Fields{
		"CreateMember": &graphql.Field{
			Name:    "CreateMember",
			Type:    CreateMemberQueryType,
			Args:    CreateMemberArguments,
			Resolve: AtMemberManagerCreateMemberResolver,
		},
		"UpdateMember": &graphql.Field{
			Name:    "UpdateMember",
			Type:    UpdateMemberQueryType,
			Args:    UpdateMemberArguments,
			Resolve: AtMemberManagerUpdateMemberResolver,
		},
		"DeleteMember": &graphql.Field{
			Name:    "DeleteMember",
			Type:    DeleteMemberQueryType,
			Args:    DeleteMemberArguments,
			Resolve: AtMemberManagerDeleteMemberResolver,
		},
	},
})

var AtMemberManagerRootMutationField = graphql.Field{
	Name: "AtMemberManager",
	Type: internalAtMemberManagerRootMutation,
	Resolve: func(p graphql.ResolveParams) (interface{}, error) {
		return func() (interface{}, error) {
			return p.Info, nil
		}, nil
	},
}
