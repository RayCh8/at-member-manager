// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/pb/rpc.proto

package pb

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
	time "time"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"

	_ "github.com/AmazingTalker/protoc-gen-svc/utils"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Member struct {
	ID        int64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	Birthday  *time.Time `protobuf:"bytes,3,opt,name=birthday,proto3,stdtime,wktptr" json:"birthday"`
	CreatedAt *time.Time `protobuf:"bytes,4,opt,name=created_at,proto3,stdtime,wktptr" json:"created_at"`
	UpdatedAt *time.Time `protobuf:"bytes,5,opt,name=updated_at,proto3,stdtime,wktptr" json:"updated_at"`
}

func (m *Member) Reset()      { *m = Member{} }
func (*Member) ProtoMessage() {}
func (*Member) Descriptor() ([]byte, []int) {
	return fileDescriptor_db28b008f832a8c4, []int{0}
}
func (m *Member) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Member) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Member.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Member) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Member.Merge(m, src)
}
func (m *Member) XXX_Size() int {
	return m.Size()
}
func (m *Member) XXX_DiscardUnknown() {
	xxx_messageInfo_Member.DiscardUnknown(m)
}

var xxx_messageInfo_Member proto.InternalMessageInfo

func (m *Member) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Member) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Member) GetBirthday() *time.Time {
	if m != nil {
		return m.Birthday
	}
	return nil
}

func (m *Member) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Member) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

type HealthReq struct {
}

func (m *HealthReq) Reset()      { *m = HealthReq{} }
func (*HealthReq) ProtoMessage() {}
func (*HealthReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_db28b008f832a8c4, []int{1}
}
func (m *HealthReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HealthReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HealthReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HealthReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthReq.Merge(m, src)
}
func (m *HealthReq) XXX_Size() int {
	return m.Size()
}
func (m *HealthReq) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthReq.DiscardUnknown(m)
}

var xxx_messageInfo_HealthReq proto.InternalMessageInfo

type HealthRes struct {
	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (m *HealthRes) Reset()      { *m = HealthRes{} }
func (*HealthRes) ProtoMessage() {}
func (*HealthRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_db28b008f832a8c4, []int{2}
}
func (m *HealthRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HealthRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HealthRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HealthRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthRes.Merge(m, src)
}
func (m *HealthRes) XXX_Size() int {
	return m.Size()
}
func (m *HealthRes) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthRes.DiscardUnknown(m)
}

var xxx_messageInfo_HealthRes proto.InternalMessageInfo

func (m *HealthRes) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

type CreateMemberReq struct {
	Name     string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name" validate:"required"`
	Birthday *time.Time `protobuf:"bytes,2,opt,name=birthday,proto3,stdtime,wktptr" json:"birthday" validate:"required"`
}

func (m *CreateMemberReq) Reset()      { *m = CreateMemberReq{} }
func (*CreateMemberReq) ProtoMessage() {}
func (*CreateMemberReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_db28b008f832a8c4, []int{3}
}
func (m *CreateMemberReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateMemberReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateMemberReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateMemberReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateMemberReq.Merge(m, src)
}
func (m *CreateMemberReq) XXX_Size() int {
	return m.Size()
}
func (m *CreateMemberReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateMemberReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreateMemberReq proto.InternalMessageInfo

func (m *CreateMemberReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateMemberReq) GetBirthday() *time.Time {
	if m != nil {
		return m.Birthday
	}
	return nil
}

type CreateMemberRes struct {
	Member *Member `protobuf:"bytes,1,opt,name=member,proto3" json:"member,omitempty"`
}

func (m *CreateMemberRes) Reset()      { *m = CreateMemberRes{} }
func (*CreateMemberRes) ProtoMessage() {}
func (*CreateMemberRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_db28b008f832a8c4, []int{4}
}
func (m *CreateMemberRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateMemberRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateMemberRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateMemberRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateMemberRes.Merge(m, src)
}
func (m *CreateMemberRes) XXX_Size() int {
	return m.Size()
}
func (m *CreateMemberRes) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateMemberRes.DiscardUnknown(m)
}

var xxx_messageInfo_CreateMemberRes proto.InternalMessageInfo

func (m *CreateMemberRes) GetMember() *Member {
	if m != nil {
		return m.Member
	}
	return nil
}

type UpdateMemberReq struct {
	ID       string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Name     string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name" validate:"required"`
	Birthday *time.Time `protobuf:"bytes,3,opt,name=birthday,proto3,stdtime,wktptr" json:"birthday" validate:"required"`
}

func (m *UpdateMemberReq) Reset()      { *m = UpdateMemberReq{} }
func (*UpdateMemberReq) ProtoMessage() {}
func (*UpdateMemberReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_db28b008f832a8c4, []int{5}
}
func (m *UpdateMemberReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateMemberReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateMemberReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateMemberReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMemberReq.Merge(m, src)
}
func (m *UpdateMemberReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateMemberReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMemberReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMemberReq proto.InternalMessageInfo

func (m *UpdateMemberReq) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *UpdateMemberReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateMemberReq) GetBirthday() *time.Time {
	if m != nil {
		return m.Birthday
	}
	return nil
}

type UpdateMemberRes struct {
	Member *Member `protobuf:"bytes,1,opt,name=member,proto3" json:"member,omitempty"`
}

func (m *UpdateMemberRes) Reset()      { *m = UpdateMemberRes{} }
func (*UpdateMemberRes) ProtoMessage() {}
func (*UpdateMemberRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_db28b008f832a8c4, []int{6}
}
func (m *UpdateMemberRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateMemberRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateMemberRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateMemberRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMemberRes.Merge(m, src)
}
func (m *UpdateMemberRes) XXX_Size() int {
	return m.Size()
}
func (m *UpdateMemberRes) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMemberRes.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMemberRes proto.InternalMessageInfo

func (m *UpdateMemberRes) GetMember() *Member {
	if m != nil {
		return m.Member
	}
	return nil
}

type ListMembersReq struct {
}

func (m *ListMembersReq) Reset()      { *m = ListMembersReq{} }
func (*ListMembersReq) ProtoMessage() {}
func (*ListMembersReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_db28b008f832a8c4, []int{7}
}
func (m *ListMembersReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListMembersReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListMembersReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListMembersReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListMembersReq.Merge(m, src)
}
func (m *ListMembersReq) XXX_Size() int {
	return m.Size()
}
func (m *ListMembersReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListMembersReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListMembersReq proto.InternalMessageInfo

type ListMembersRes struct {
	Members []*Member `protobuf:"bytes,1,rep,name=members,proto3" json:"members,omitempty"`
}

func (m *ListMembersRes) Reset()      { *m = ListMembersRes{} }
func (*ListMembersRes) ProtoMessage() {}
func (*ListMembersRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_db28b008f832a8c4, []int{8}
}
func (m *ListMembersRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListMembersRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListMembersRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListMembersRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListMembersRes.Merge(m, src)
}
func (m *ListMembersRes) XXX_Size() int {
	return m.Size()
}
func (m *ListMembersRes) XXX_DiscardUnknown() {
	xxx_messageInfo_ListMembersRes.DiscardUnknown(m)
}

var xxx_messageInfo_ListMembersRes proto.InternalMessageInfo

func (m *ListMembersRes) GetMembers() []*Member {
	if m != nil {
		return m.Members
	}
	return nil
}

type DeleteMemberReq struct {
	ID string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
}

func (m *DeleteMemberReq) Reset()      { *m = DeleteMemberReq{} }
func (*DeleteMemberReq) ProtoMessage() {}
func (*DeleteMemberReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_db28b008f832a8c4, []int{9}
}
func (m *DeleteMemberReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteMemberReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteMemberReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteMemberReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteMemberReq.Merge(m, src)
}
func (m *DeleteMemberReq) XXX_Size() int {
	return m.Size()
}
func (m *DeleteMemberReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteMemberReq.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteMemberReq proto.InternalMessageInfo

func (m *DeleteMemberReq) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type DeleteMemberRes struct {
}

func (m *DeleteMemberRes) Reset()      { *m = DeleteMemberRes{} }
func (*DeleteMemberRes) ProtoMessage() {}
func (*DeleteMemberRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_db28b008f832a8c4, []int{10}
}
func (m *DeleteMemberRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteMemberRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteMemberRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteMemberRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteMemberRes.Merge(m, src)
}
func (m *DeleteMemberRes) XXX_Size() int {
	return m.Size()
}
func (m *DeleteMemberRes) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteMemberRes.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteMemberRes proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Member)(nil), "pb.Member")
	proto.RegisterType((*HealthReq)(nil), "pb.HealthReq")
	proto.RegisterType((*HealthRes)(nil), "pb.HealthRes")
	proto.RegisterType((*CreateMemberReq)(nil), "pb.CreateMemberReq")
	proto.RegisterType((*CreateMemberRes)(nil), "pb.CreateMemberRes")
	proto.RegisterType((*UpdateMemberReq)(nil), "pb.UpdateMemberReq")
	proto.RegisterType((*UpdateMemberRes)(nil), "pb.UpdateMemberRes")
	proto.RegisterType((*ListMembersReq)(nil), "pb.ListMembersReq")
	proto.RegisterType((*ListMembersRes)(nil), "pb.ListMembersRes")
	proto.RegisterType((*DeleteMemberReq)(nil), "pb.DeleteMemberReq")
	proto.RegisterType((*DeleteMemberRes)(nil), "pb.DeleteMemberRes")
}

func init() { proto.RegisterFile("pkg/pb/rpc.proto", fileDescriptor_db28b008f832a8c4) }

var fileDescriptor_db28b008f832a8c4 = []byte{
	// 786 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0xbf, 0x6f, 0xf3, 0x44,
	0x18, 0xce, 0x39, 0x21, 0x4d, 0x2e, 0xe1, 0x4b, 0x74, 0x9f, 0x28, 0x91, 0x0b, 0x76, 0x74, 0x40,
	0x1b, 0x21, 0xd5, 0x6e, 0x03, 0x52, 0x51, 0x3b, 0x35, 0x74, 0x00, 0x41, 0x19, 0xac, 0x82, 0x50,
	0x97, 0xea, 0x5c, 0x1f, 0x8e, 0x95, 0x38, 0x76, 0xed, 0x0b, 0x52, 0x99, 0x10, 0x7b, 0xa5, 0x0a,
	0xfe, 0x01, 0xc6, 0x8a, 0x7f, 0x82, 0x95, 0xb1, 0x12, 0x4b, 0x27, 0x97, 0xba, 0x08, 0xa1, 0x4c,
	0x15, 0x0b, 0x13, 0x12, 0xca, 0x9d, 0x9d, 0x38, 0x6e, 0xab, 0xf2, 0x43, 0xfa, 0x96, 0xaa, 0xf7,
	0xfa, 0x79, 0x9f, 0xe7, 0xee, 0x79, 0xde, 0xcb, 0xc1, 0xa6, 0x3f, 0xb0, 0x75, 0xdf, 0xd4, 0x03,
	0xff, 0x58, 0xf3, 0x03, 0x8f, 0x79, 0x48, 0xf2, 0x4d, 0xb9, 0xc3, 0xfa, 0x4e, 0x60, 0x1d, 0xf9,
	0x24, 0x60, 0xa7, 0xba, 0xed, 0x79, 0xf6, 0x90, 0xea, 0xc4, 0x77, 0x74, 0x32, 0x1a, 0x79, 0x8c,
	0x30, 0xc7, 0x1b, 0x85, 0x02, 0x2d, 0xb7, 0x17, 0x91, 0xb6, 0xc7, 0xcb, 0xfc, 0xbf, 0x04, 0xb1,
	0x96, 0x45, 0x10, 0x97, 0x7c, 0xe5, 0x8c, 0x6c, 0x46, 0x86, 0x03, 0x1a, 0xe8, 0x84, 0x71, 0x48,
	0x02, 0x54, 0x13, 0x21, 0xbe, 0x32, 0xc7, 0x5f, 0xe8, 0xcc, 0x71, 0x69, 0xc8, 0x88, 0xeb, 0x0b,
	0x00, 0x8e, 0x25, 0x58, 0xde, 0xa7, 0xae, 0x49, 0x03, 0xb4, 0x0c, 0x25, 0xc7, 0x6a, 0x81, 0x36,
	0xe8, 0x14, 0x7b, 0xe5, 0x38, 0x52, 0xa5, 0x0f, 0xf7, 0x0c, 0xc9, 0xb1, 0xd0, 0x9b, 0xb0, 0x34,
	0x22, 0x2e, 0x6d, 0x49, 0x6d, 0xd0, 0xa9, 0xf6, 0x9a, 0x71, 0xa4, 0x96, 0x3e, 0x21, 0x2e, 0x9d,
	0x44, 0x2a, 0xaf, 0x1b, 0xfc, 0x2f, 0xfa, 0x1c, 0x56, 0x4c, 0x27, 0x60, 0x7d, 0x8b, 0x9c, 0xb6,
	0x8a, 0x6d, 0xd0, 0xa9, 0x75, 0x65, 0x4d, 0x88, 0x6b, 0xa9, 0xb8, 0x76, 0x90, 0x8a, 0xf7, 0xda,
	0x71, 0xa4, 0x56, 0x7a, 0x09, 0x7e, 0x12, 0xa9, 0xb3, 0xde, 0xf3, 0x6b, 0x15, 0x7c, 0x7f, 0xad,
	0x02, 0x63, 0x56, 0x41, 0x47, 0x10, 0x1e, 0x07, 0x94, 0x30, 0x6a, 0x1d, 0x11, 0xd6, 0x2a, 0x3d,
	0xc9, 0xfd, 0x46, 0x1c, 0xa9, 0xd5, 0xf7, 0x45, 0xc7, 0x2e, 0x9b, 0x44, 0x6a, 0xa6, 0x7d, 0x46,
	0x9f, 0xa9, 0x4d, 0x05, 0xc6, 0xbe, 0x95, 0x0a, 0xbc, 0xf4, 0xcf, 0x04, 0x3e, 0x15, 0x1d, 0x42,
	0x60, 0xde, 0x3e, 0x17, 0x98, 0xd7, 0x70, 0x0d, 0x56, 0x3f, 0xa0, 0x64, 0xc8, 0xfa, 0x06, 0x3d,
	0xc1, 0x2b, 0xf3, 0x45, 0x88, 0x9e, 0x41, 0xc9, 0x1b, 0x70, 0xcf, 0x2b, 0x86, 0xe4, 0x0d, 0xf0,
	0x8f, 0x00, 0x36, 0xc4, 0xd6, 0x45, 0x28, 0x06, 0x3d, 0x41, 0x3b, 0x89, 0xff, 0x80, 0xfb, 0xbf,
	0x96, 0xf7, 0xff, 0x8f, 0x48, 0x7d, 0xfe, 0x25, 0x19, 0x3a, 0x53, 0xb5, 0x6d, 0x1c, 0xd0, 0x93,
	0xb1, 0x13, 0x50, 0x0b, 0x27, 0xb1, 0x78, 0x99, 0x58, 0xa4, 0x27, 0x4f, 0xb6, 0xf5, 0x58, 0x2c,
	0x8f, 0x88, 0xdc, 0x4f, 0x0b, 0x7f, 0x94, 0x3f, 0x40, 0x88, 0x34, 0x58, 0x76, 0xf9, 0x82, 0x1f,
	0xa1, 0xd6, 0x85, 0x9a, 0x6f, 0x6a, 0xe2, 0x73, 0x0f, 0xc6, 0x91, 0x9a, 0x0c, 0xa0, 0x91, 0xa0,
	0xb6, 0x2b, 0x3f, 0xfc, 0x75, 0xb6, 0x5a, 0xec, 0x6e, 0x6c, 0xe2, 0xdf, 0x00, 0x6c, 0x08, 0xa3,
	0xe7, 0x76, 0xbc, 0x35, 0x1b, 0xd3, 0x6a, 0xef, 0x15, 0x31, 0xa6, 0x93, 0x48, 0x95, 0x1c, 0xeb,
	0xdb, 0x3f, 0xcf, 0x56, 0x4b, 0x2c, 0x18, 0x53, 0x3e, 0xb5, 0x3b, 0x0b, 0x53, 0xfb, 0x3f, 0x5c,
	0x2b, 0xbe, 0x20, 0xd7, 0x16, 0xcf, 0xf9, 0xdf, 0x5d, 0xdb, 0xc0, 0x4d, 0xf8, 0xec, 0x63, 0x27,
	0x64, 0xe2, 0x7b, 0x38, 0x9d, 0xb9, 0xfd, 0x5c, 0x25, 0x44, 0x9b, 0x70, 0x49, 0xf4, 0x85, 0x2d,
	0xd0, 0x2e, 0xe6, 0xe8, 0x6b, 0x71, 0xa4, 0x2e, 0xa5, 0xe0, 0x14, 0x97, 0x11, 0x78, 0x0f, 0x36,
	0xf6, 0xe8, 0x90, 0xfe, 0xfb, 0x54, 0xf0, 0x4a, 0xbe, 0x73, 0x4e, 0xfb, 0x6e, 0xf7, 0xa2, 0x08,
	0x1b, 0xbb, 0xc9, 0x26, 0xf7, 0xc9, 0x88, 0xd8, 0x34, 0x40, 0x5b, 0xb0, 0x2c, 0x6e, 0x0b, 0x7a,
	0x79, 0xba, 0xc1, 0xd9, 0x35, 0x92, 0x17, 0x96, 0x21, 0x6e, 0x7c, 0xf3, 0xf3, 0xaf, 0xdf, 0x49,
	0x55, 0xb4, 0xa4, 0xf7, 0x05, 0xfc, 0x33, 0x58, 0xcf, 0xce, 0x21, 0x7a, 0x3e, 0xc5, 0xe7, 0xae,
	0x96, 0xfc, 0x40, 0x31, 0xc4, 0xaf, 0x71, 0xaa, 0x65, 0x5c, 0xe7, 0x3f, 0xcf, 0xe9, 0xe9, 0x13,
	0x9b, 0xd1, 0x21, 0xac, 0x67, 0x93, 0x12, 0xbc, 0xb9, 0x19, 0x95, 0x1f, 0x28, 0x86, 0xb8, 0xcd,
	0x79, 0x65, 0xb9, 0x99, 0xe5, 0xd5, 0xb7, 0x1d, 0x6b, 0xc6, 0x7d, 0x00, 0x6b, 0x99, 0x98, 0x10,
	0x9a, 0xb2, 0x2c, 0x26, 0x29, 0xdf, 0xaf, 0x85, 0xf8, 0x75, 0x4e, 0xfc, 0x2a, 0x5a, 0xdc, 0x70,
	0x9a, 0x1b, 0x32, 0x60, 0x3d, 0xeb, 0xb9, 0xd8, 0x71, 0x2e, 0x3f, 0xf9, 0x81, 0x62, 0x88, 0x5b,
	0x9c, 0x18, 0xbd, 0x7d, 0x6f, 0xc7, 0x3d, 0xfb, 0xf2, 0x46, 0x29, 0x5c, 0xdd, 0x28, 0x85, 0xbb,
	0x1b, 0x05, 0x7c, 0x1d, 0x2b, 0xe0, 0x22, 0x56, 0xc0, 0x4f, 0xb1, 0x02, 0x2e, 0x63, 0x05, 0xfc,
	0x12, 0x2b, 0xe0, 0xf7, 0x58, 0x29, 0xdc, 0xc5, 0x0a, 0x38, 0xbf, 0x55, 0x0a, 0x97, 0xb7, 0x4a,
	0xe1, 0xea, 0x56, 0x29, 0x1c, 0x6e, 0xda, 0x0e, 0xeb, 0x8f, 0x4d, 0xed, 0xd8, 0x73, 0xf5, 0x5d,
	0xf1, 0x6a, 0x1d, 0xa4, 0xaf, 0xd6, 0xba, 0xa0, 0x5f, 0x77, 0x45, 0xf0, 0xba, 0x78, 0x43, 0xcd,
	0x32, 0xbf, 0x6f, 0xef, 0xfc, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x55, 0xa0, 0xf7, 0xbf, 0x54, 0x07,
	0x00, 0x00,
}

func (this *Member) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Member)
	if !ok {
		that2, ok := that.(Member)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if that1.Birthday == nil {
		if this.Birthday != nil {
			return false
		}
	} else if !this.Birthday.Equal(*that1.Birthday) {
		return false
	}
	if that1.CreatedAt == nil {
		if this.CreatedAt != nil {
			return false
		}
	} else if !this.CreatedAt.Equal(*that1.CreatedAt) {
		return false
	}
	if that1.UpdatedAt == nil {
		if this.UpdatedAt != nil {
			return false
		}
	} else if !this.UpdatedAt.Equal(*that1.UpdatedAt) {
		return false
	}
	return true
}
func (this *HealthReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HealthReq)
	if !ok {
		that2, ok := that.(HealthReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *HealthRes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HealthRes)
	if !ok {
		that2, ok := that.(HealthRes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ok != that1.Ok {
		return false
	}
	return true
}
func (this *CreateMemberReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateMemberReq)
	if !ok {
		that2, ok := that.(CreateMemberReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if that1.Birthday == nil {
		if this.Birthday != nil {
			return false
		}
	} else if !this.Birthday.Equal(*that1.Birthday) {
		return false
	}
	return true
}
func (this *CreateMemberRes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateMemberRes)
	if !ok {
		that2, ok := that.(CreateMemberRes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Member.Equal(that1.Member) {
		return false
	}
	return true
}
func (this *UpdateMemberReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateMemberReq)
	if !ok {
		that2, ok := that.(UpdateMemberReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if that1.Birthday == nil {
		if this.Birthday != nil {
			return false
		}
	} else if !this.Birthday.Equal(*that1.Birthday) {
		return false
	}
	return true
}
func (this *UpdateMemberRes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateMemberRes)
	if !ok {
		that2, ok := that.(UpdateMemberRes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Member.Equal(that1.Member) {
		return false
	}
	return true
}
func (this *ListMembersReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListMembersReq)
	if !ok {
		that2, ok := that.(ListMembersReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ListMembersRes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListMembersRes)
	if !ok {
		that2, ok := that.(ListMembersRes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Members) != len(that1.Members) {
		return false
	}
	for i := range this.Members {
		if !this.Members[i].Equal(that1.Members[i]) {
			return false
		}
	}
	return true
}
func (this *DeleteMemberReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteMemberReq)
	if !ok {
		that2, ok := that.(DeleteMemberReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	return true
}
func (this *DeleteMemberRes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteMemberRes)
	if !ok {
		that2, ok := that.(DeleteMemberRes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Member) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.Member{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Birthday: "+fmt.Sprintf("%#v", this.Birthday)+",\n")
	s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	s = append(s, "UpdatedAt: "+fmt.Sprintf("%#v", this.UpdatedAt)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HealthReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.HealthReq{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HealthRes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.HealthRes{")
	s = append(s, "Ok: "+fmt.Sprintf("%#v", this.Ok)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateMemberReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.CreateMemberReq{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Birthday: "+fmt.Sprintf("%#v", this.Birthday)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateMemberRes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.CreateMemberRes{")
	if this.Member != nil {
		s = append(s, "Member: "+fmt.Sprintf("%#v", this.Member)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateMemberReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.UpdateMemberReq{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Birthday: "+fmt.Sprintf("%#v", this.Birthday)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateMemberRes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.UpdateMemberRes{")
	if this.Member != nil {
		s = append(s, "Member: "+fmt.Sprintf("%#v", this.Member)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListMembersReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.ListMembersReq{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListMembersRes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.ListMembersRes{")
	if this.Members != nil {
		s = append(s, "Members: "+fmt.Sprintf("%#v", this.Members)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteMemberReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.DeleteMemberReq{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteMemberRes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.DeleteMemberRes{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringRpc(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AtMemberManagerClient is the client API for AtMemberManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AtMemberManagerClient interface {
	// Health check api for k8s.
	Health(ctx context.Context, in *HealthReq, opts ...grpc.CallOption) (*HealthRes, error)
	CreateMember(ctx context.Context, in *CreateMemberReq, opts ...grpc.CallOption) (*CreateMemberRes, error)
	UpdateMember(ctx context.Context, in *UpdateMemberReq, opts ...grpc.CallOption) (*UpdateMemberRes, error)
	ListMembers(ctx context.Context, in *ListMembersReq, opts ...grpc.CallOption) (*ListMembersRes, error)
	DeleteMember(ctx context.Context, in *DeleteMemberReq, opts ...grpc.CallOption) (*DeleteMemberRes, error)
}

type atMemberManagerClient struct {
	cc *grpc.ClientConn
}

func NewAtMemberManagerClient(cc *grpc.ClientConn) AtMemberManagerClient {
	return &atMemberManagerClient{cc}
}

func (c *atMemberManagerClient) Health(ctx context.Context, in *HealthReq, opts ...grpc.CallOption) (*HealthRes, error) {
	out := new(HealthRes)
	err := c.cc.Invoke(ctx, "/pb.AtMemberManager/Health", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atMemberManagerClient) CreateMember(ctx context.Context, in *CreateMemberReq, opts ...grpc.CallOption) (*CreateMemberRes, error) {
	out := new(CreateMemberRes)
	err := c.cc.Invoke(ctx, "/pb.AtMemberManager/CreateMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atMemberManagerClient) UpdateMember(ctx context.Context, in *UpdateMemberReq, opts ...grpc.CallOption) (*UpdateMemberRes, error) {
	out := new(UpdateMemberRes)
	err := c.cc.Invoke(ctx, "/pb.AtMemberManager/UpdateMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atMemberManagerClient) ListMembers(ctx context.Context, in *ListMembersReq, opts ...grpc.CallOption) (*ListMembersRes, error) {
	out := new(ListMembersRes)
	err := c.cc.Invoke(ctx, "/pb.AtMemberManager/ListMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atMemberManagerClient) DeleteMember(ctx context.Context, in *DeleteMemberReq, opts ...grpc.CallOption) (*DeleteMemberRes, error) {
	out := new(DeleteMemberRes)
	err := c.cc.Invoke(ctx, "/pb.AtMemberManager/DeleteMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AtMemberManagerServer is the server API for AtMemberManager service.
type AtMemberManagerServer interface {
	// Health check api for k8s.
	Health(context.Context, *HealthReq) (*HealthRes, error)
	CreateMember(context.Context, *CreateMemberReq) (*CreateMemberRes, error)
	UpdateMember(context.Context, *UpdateMemberReq) (*UpdateMemberRes, error)
	ListMembers(context.Context, *ListMembersReq) (*ListMembersRes, error)
	DeleteMember(context.Context, *DeleteMemberReq) (*DeleteMemberRes, error)
}

// UnimplementedAtMemberManagerServer can be embedded to have forward compatible implementations.
type UnimplementedAtMemberManagerServer struct {
}

func (*UnimplementedAtMemberManagerServer) Health(ctx context.Context, req *HealthReq) (*HealthRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (*UnimplementedAtMemberManagerServer) CreateMember(ctx context.Context, req *CreateMemberReq) (*CreateMemberRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMember not implemented")
}
func (*UnimplementedAtMemberManagerServer) UpdateMember(ctx context.Context, req *UpdateMemberReq) (*UpdateMemberRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMember not implemented")
}
func (*UnimplementedAtMemberManagerServer) ListMembers(ctx context.Context, req *ListMembersReq) (*ListMembersRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMembers not implemented")
}
func (*UnimplementedAtMemberManagerServer) DeleteMember(ctx context.Context, req *DeleteMemberReq) (*DeleteMemberRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMember not implemented")
}

func RegisterAtMemberManagerServer(s *grpc.Server, srv AtMemberManagerServer) {
	s.RegisterService(&_AtMemberManager_serviceDesc, srv)
}

func _AtMemberManager_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtMemberManagerServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AtMemberManager/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtMemberManagerServer).Health(ctx, req.(*HealthReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AtMemberManager_CreateMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtMemberManagerServer).CreateMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AtMemberManager/CreateMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtMemberManagerServer).CreateMember(ctx, req.(*CreateMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AtMemberManager_UpdateMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtMemberManagerServer).UpdateMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AtMemberManager/UpdateMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtMemberManagerServer).UpdateMember(ctx, req.(*UpdateMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AtMemberManager_ListMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMembersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtMemberManagerServer).ListMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AtMemberManager/ListMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtMemberManagerServer).ListMembers(ctx, req.(*ListMembersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AtMemberManager_DeleteMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtMemberManagerServer).DeleteMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AtMemberManager/DeleteMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtMemberManagerServer).DeleteMember(ctx, req.(*DeleteMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _AtMemberManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.AtMemberManager",
	HandlerType: (*AtMemberManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _AtMemberManager_Health_Handler,
		},
		{
			MethodName: "CreateMember",
			Handler:    _AtMemberManager_CreateMember_Handler,
		},
		{
			MethodName: "UpdateMember",
			Handler:    _AtMemberManager_UpdateMember_Handler,
		},
		{
			MethodName: "ListMembers",
			Handler:    _AtMemberManager_ListMembers_Handler,
		},
		{
			MethodName: "DeleteMember",
			Handler:    _AtMemberManager_DeleteMember_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/pb/rpc.proto",
}

func (m *Member) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Member) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Member) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdatedAt != nil {
		n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintRpc(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x2a
	}
	if m.CreatedAt != nil {
		n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt):])
		if err2 != nil {
			return 0, err2
		}
		i -= n2
		i = encodeVarintRpc(dAtA, i, uint64(n2))
		i--
		dAtA[i] = 0x22
	}
	if m.Birthday != nil {
		n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.Birthday, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.Birthday):])
		if err3 != nil {
			return 0, err3
		}
		i -= n3
		i = encodeVarintRpc(dAtA, i, uint64(n3))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintRpc(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintRpc(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HealthReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HealthReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HealthReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *HealthRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HealthRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HealthRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ok {
		i--
		if m.Ok {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateMemberReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateMemberReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateMemberReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Birthday != nil {
		n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.Birthday, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.Birthday):])
		if err4 != nil {
			return 0, err4
		}
		i -= n4
		i = encodeVarintRpc(dAtA, i, uint64(n4))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintRpc(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateMemberRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateMemberRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateMemberRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Member != nil {
		{
			size, err := m.Member.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRpc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateMemberReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMemberReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateMemberReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Birthday != nil {
		n6, err6 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.Birthday, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.Birthday):])
		if err6 != nil {
			return 0, err6
		}
		i -= n6
		i = encodeVarintRpc(dAtA, i, uint64(n6))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintRpc(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintRpc(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateMemberRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMemberRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateMemberRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Member != nil {
		{
			size, err := m.Member.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRpc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListMembersReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListMembersReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListMembersReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ListMembersRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListMembersRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListMembersRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Members) > 0 {
		for iNdEx := len(m.Members) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Members[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRpc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DeleteMemberReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteMemberReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteMemberReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintRpc(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteMemberRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteMemberRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteMemberRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintRpc(dAtA []byte, offset int, v uint64) int {
	offset -= sovRpc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Member) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovRpc(uint64(m.ID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	if m.Birthday != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.Birthday)
		n += 1 + l + sovRpc(uint64(l))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovRpc(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 1 + l + sovRpc(uint64(l))
	}
	return n
}

func (m *HealthReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *HealthRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ok {
		n += 2
	}
	return n
}

func (m *CreateMemberReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	if m.Birthday != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.Birthday)
		n += 1 + l + sovRpc(uint64(l))
	}
	return n
}

func (m *CreateMemberRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Member != nil {
		l = m.Member.Size()
		n += 1 + l + sovRpc(uint64(l))
	}
	return n
}

func (m *UpdateMemberReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	if m.Birthday != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.Birthday)
		n += 1 + l + sovRpc(uint64(l))
	}
	return n
}

func (m *UpdateMemberRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Member != nil {
		l = m.Member.Size()
		n += 1 + l + sovRpc(uint64(l))
	}
	return n
}

func (m *ListMembersReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ListMembersRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Members) > 0 {
		for _, e := range m.Members {
			l = e.Size()
			n += 1 + l + sovRpc(uint64(l))
		}
	}
	return n
}

func (m *DeleteMemberReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	return n
}

func (m *DeleteMemberRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovRpc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRpc(x uint64) (n int) {
	return sovRpc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Member) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Member{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Birthday:` + strings.Replace(fmt.Sprintf("%v", this.Birthday), "Timestamp", "types.Timestamp", 1) + `,`,
		`CreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`UpdatedAt:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HealthReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HealthReq{`,
		`}`,
	}, "")
	return s
}
func (this *HealthRes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HealthRes{`,
		`Ok:` + fmt.Sprintf("%v", this.Ok) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateMemberReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateMemberReq{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Birthday:` + strings.Replace(fmt.Sprintf("%v", this.Birthday), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateMemberRes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateMemberRes{`,
		`Member:` + strings.Replace(this.Member.String(), "Member", "Member", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateMemberReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateMemberReq{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Birthday:` + strings.Replace(fmt.Sprintf("%v", this.Birthday), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateMemberRes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateMemberRes{`,
		`Member:` + strings.Replace(this.Member.String(), "Member", "Member", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListMembersReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListMembersReq{`,
		`}`,
	}, "")
	return s
}
func (this *ListMembersRes) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForMembers := "[]*Member{"
	for _, f := range this.Members {
		repeatedStringForMembers += strings.Replace(f.String(), "Member", "Member", 1) + ","
	}
	repeatedStringForMembers += "}"
	s := strings.Join([]string{`&ListMembersRes{`,
		`Members:` + repeatedStringForMembers + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteMemberReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteMemberReq{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteMemberRes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteMemberRes{`,
		`}`,
	}, "")
	return s
}
func valueToStringRpc(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Member) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Member: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Member: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Birthday", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Birthday == nil {
				m.Birthday = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.Birthday, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HealthReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HealthReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HealthReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HealthRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HealthRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HealthRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateMemberReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateMemberReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateMemberReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Birthday", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Birthday == nil {
				m.Birthday = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.Birthday, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateMemberRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateMemberRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateMemberRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Member", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Member == nil {
				m.Member = &Member{}
			}
			if err := m.Member.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMemberReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateMemberReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateMemberReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Birthday", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Birthday == nil {
				m.Birthday = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.Birthday, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMemberRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateMemberRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateMemberRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Member", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Member == nil {
				m.Member = &Member{}
			}
			if err := m.Member.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListMembersReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListMembersReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListMembersReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListMembersRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListMembersRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListMembersRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, &Member{})
			if err := m.Members[len(m.Members)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteMemberReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteMemberReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteMemberReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteMemberRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteMemberRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteMemberRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRpc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRpc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRpc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRpc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRpc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRpc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRpc = fmt.Errorf("proto: unexpected end of group")
)
