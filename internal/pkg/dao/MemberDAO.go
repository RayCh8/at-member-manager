// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	dao "github.com/AmazingTalker/at-member-manager/pkg/dao"
	daokit "github.com/AmazingTalker/go-rpc-kit/daokit"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MemberDAO is an autogenerated mock type for the MemberDAO type
type MemberDAO struct {
	mock.Mock
}

// CreateMember provides a mock function with given fields: _a0, _a1, _a2
func (_m *MemberDAO) CreateMember(_a0 context.Context, _a1 *dao.Member, _a2 ...daokit.Enrich) (*dao.Member, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *dao.Member
	if rf, ok := ret.Get(0).(func(context.Context, *dao.Member, ...daokit.Enrich) *dao.Member); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.Member)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *dao.Member, ...daokit.Enrich) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMember provides a mock function with given fields: _a0, _a1
func (_m *MemberDAO) DeleteMember(_a0 context.Context, _a1 int64) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListMembers provides a mock function with given fields: _a0
func (_m *MemberDAO) ListMembers(_a0 context.Context) ([]dao.Member, error) {
	ret := _m.Called(_a0)

	var r0 []dao.Member
	if rf, ok := ret.Get(0).(func(context.Context) []dao.Member); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dao.Member)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMember provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MemberDAO) UpdateMember(_a0 context.Context, _a1 int64, _a2 string, _a3 *time.Time) (*dao.Member, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *dao.Member
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, *time.Time) *dao.Member); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.Member)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, string, *time.Time) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMemberDAO interface {
	mock.TestingT
	Cleanup(func())
}

// NewMemberDAO creates a new instance of MemberDAO. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMemberDAO(t mockConstructorTestingTNewMemberDAO) *MemberDAO {
	mock := &MemberDAO{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
